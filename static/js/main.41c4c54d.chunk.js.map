{"version":3,"sources":["components/Header.jsx","components/WeatherInfo.js","components/WeatherForm.js","components/Carrousel.jsx","App.js","serviceWorker.js","index.js","Keys.js"],"names":["Header","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","WeatherInfo","props","console","log","className","error","city","country","temperature","description","humidity","wind_speed","WeatherForm","onSubmit","getWeather","name","placeholder","autoFocus","Carrousel","data-ride","src","alt","role","data-slide","aria-hidden","App","state","e","a","target","elements","preventDefault","cityValue","value","countryValue","API_URL","WEATHER_KEY","fetch","response","json","data","setState","main","temp","weather","wind","speed","sys","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.41c4c54d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a class=\"navbar-brand\" href=\"#\">Ale-Clima</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul class=\"navbar-nav\">\r\n                <li class=\"nav-item active\">\r\n                    <a class=\"nav-link\" href=\"#\"> Inicio <span class=\"sr-only\">(current)</span></a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"#\"> Clima </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"#\"> Contactos </a>\r\n                </li>\r\n                {/* <li class=\"nav-item\">\r\n                    <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                </li> */}\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst WeatherInfo = function (props) {\r\n\r\n    console.log(props);\r\n\r\n    return (\r\n\r\n        <div className=\"\">\r\n            {\r\n                props.error &&\r\n                <div className=\"alert alert-danger\" >\r\n                    <p> {props.error} </p>\r\n                </div>\r\n            }\r\n            \r\n            <div className=\"card card-body\" >\r\n                <p>\r\n                    Localizacion: {props.city}, {props.country}\r\n                </p>\r\n                <p>\r\n                    Temperatura: {props.temperature} °C\r\n                </p>\r\n                <p>\r\n                    Descripción: {props.description}\r\n                </p>\r\n                <p>\r\n                    Humedad: {props.humidity} %\r\n                </p>\r\n                <p>\r\n                    Velocidad viento: {props.wind_speed} Km/h\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo; ","import React from 'react';\r\n\r\n\r\nconst WeatherForm = function (props) {\r\n\r\n    return (\r\n        <div className=\"card card-body\" >\r\n            <form onSubmit={ props.getWeather } >\r\n                <div className=\"form-group\" >\r\n                    <input type=\"text\" name=\"city\" placeholder=\"Ciudad\" className=\"form-control\" autoFocus ></input>\r\n                </div>\r\n                <div className=\"form-group\" >\r\n                    <input type=\"text\" name=\"country\" placeholder=\"País\" className=\"form-control\" autoFocus ></input>\r\n                </div>\r\n                <button className=\"btmn btn-success btn-block\" >\r\n                    Obtener el clima\r\n                </button>    \r\n            </form>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default WeatherForm; ","import React from 'react';\r\nimport './assets/App.css'\r\n\r\nconst Carrousel = () => (\r\n    <section className=\"main\" >\r\n        <div id=\"carouselExampleFade\" class=\"carousel slide carousel-fade\" data-ride=\"carousel\">\r\n            <div class=\"carousel-inner\">\r\n                <div class=\"carousel-item active\">\r\n                    <img src=\"https://i.imgur.com/nIODJdC.jpg\" class=\"d-block w-100\" alt=\"...\" />\r\n                </div>\r\n                <div class=\"carousel-item\">\r\n                    <img src=\"https://i.imgur.com/dQBxCRk.jpg\" class=\"d-block w-100\" alt=\"...\" />\r\n                </div>\r\n                <div class=\"carousel-item\">\r\n                    <img src=\"https://i.imgur.com/zIRV0cK.jpg\" class=\"d-block w-100\" alt=\"...\" />\r\n                </div>\r\n            </div>\r\n            <a class=\"carousel-control-prev\" href=\"#carouselExampleFade\" role=\"button\" data-slide=\"prev\">\r\n                <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                <span class=\"sr-only\">Previous</span>\r\n            </a>\r\n            <a class=\"carousel-control-next\" href=\"#carouselExampleFade\" role=\"button\" data-slide=\"next\">\r\n                <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                <span class=\"sr-only\">Next</span>\r\n            </a>\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Carrousel;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport WeatherInfo from './components/WeatherInfo';\nimport WeatherForm from './components/WeatherForm';\nimport { WEATHER_KEY } from './Keys';\nimport Carrousel from './components/Carrousel';\n\nclass App extends Component {\n\n  state = {\n    temperature: '',\n    description: '',\n    humidity: '',\n    wind_speed: '',\n    city: '',\n    country: '',\n    error: null,\n  };\n\n  getWeather = async e => {\n    \n    const { city, country } = e.target.elements;\n    e.preventDefault();\n    const cityValue = city.value;\n    const countryValue = country.value;\n    console.log( cityValue, countryValue );\n\n    if (cityValue && countryValue) {\n    \n      const API_URL = 'http://api.openweathermap.org/data/2.5/weather?q=' + cityValue + ',' + countryValue + '&appid=' + WEATHER_KEY + '&units=metric' ;\n      \n      console.log( API_URL );\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      console.log(data);\n      console.log(this.state);\n  \n      this.setState ({\n        temperature: data.main.temp ,\n        description: data.weather[0].description ,\n        humidity: data.main.humidity ,\n        wind_speed: data.wind.speed ,\n        city: data.name ,\n        country: data.sys.country ,\n        error: null,\n      }, () => console.log(this.state) );\n    } else {\n      this.setState({ error: 'Por favor completa ciudad y país.' })\n    }\n  }\n\n  render () {\n    return (\n      <div>\n        <Header />\n        <Carrousel />\n        <div className=\"container p-4\">\n          <div className=\"row\" >\n            <div className=\"col-md-6 mx-auto\" >\n              <WeatherForm getWeather={this.getWeather} />\n              <WeatherInfo {...this.state} />\n            </div>\n          </div>\n        </div> \n      </div>  \n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n    WEATHER_KEY: '015d10e7dbdc20313e71158ee742be1a'\r\n}"],"sourceRoot":""}